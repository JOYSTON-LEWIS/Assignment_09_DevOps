pipeline {
    agent any

    environment {
        // AWS & Infra Credentials
        JL_AWS_REGION_ID                = credentials('JL_AWS_REGION_ID')
        JL_AWS_OUTPUT_FORMAT            = 'json'
        JL_AS09_EC2_IP_ADDRESS          = credentials('JL_AS09_EC2_IP_ADDRESS')
        JL_EC2_SSH_PRIVATE_KEY          = credentials('JL_EC2_SSH_PRIVATE_KEY')

        // App & GitHub
        JL_AS09_S3_BACKUP_BUCKET_NAME   = credentials('JL_AS09_S3_BACKUP_BUCKET_NAME')
        JL_AS09_LAMBDA_ROLE_ARN         = credentials('JL_AS09_LAMBDA_ROLE_ARN')
        JL_AS09_MONGO_URI_WITH_DB_NAME  = credentials('JL_AS09_MONGO_URI_WITH_DB_NAME')
        JL_AS09_GITHUB_REPO_URL         = credentials('JL_AS09_GITHUB_REPO_URL')

        // ASG Variables
        JL_AS09_EC2_AMI_ID            = credentials('JL_AS09_EC2_AMI_ID')
        JL_AS09_EC2_SUBNET_ID         = credentials('JL_AS09_EC2_SUBNET_ID')
        JL_AS09_EC2_SECURITY_GROUP_ID = credentials('JL_AS09_EC2_SECURITY_GROUP_ID')
        JL_AWS_EC2_KEY_PAIR_NAME      = credentials('JL_AWS_EC2_KEY_PAIR_NAME')
        JL_AS09_EC2_INSTANCE_TYPE     = credentials('JL_AS09_EC2_INSTANCE_TYPE')

        // Env Variables
        JL_BACKEND_MS_01                    = 3001
        JL_BACKEND_MS_02                    = 3002
        JL_AS09_FRONTEND_BASE_DOMAIN_MS_01  = "hello.joydevlabs.com"
        JL_AS09_FRONTEND_BASE_DOMAIN_MS_02  = "profile.joydevlabs.com"

        JL_S3_BUCKET_NAME                   = "jl-joyston-assignment-nine-bucket"
        JL_MONGO_BACKUP_IMAGE_REPO_NAME     = "jl-assignment-nine-mongo-atlas-backup-image"
        JL_MONGO_BACKUP_LAMBDA_NAME         = "jl-assignment-nine-mongo-backup-fn"
        JL_PROFILE_SERVICE_DB_NAME          = "assignment_nine" 
    }

    stages {

        stage('Step 1: Install All Tools on EC2') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'JL_AWS_CREDENTIALS',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sshagent (credentials: ['JL_EC2_SSH_PRIVATE_KEY']) {
                        script {
                            def SSH_IP = env.JL_AS09_EC2_IP_ADDRESS
                            def REGION = env.JL_AWS_REGION_ID
                            def OUTPUT = env.JL_AWS_OUTPUT_FORMAT
                            def ACCESS_KEY = AWS_ACCESS_KEY_ID
                            def SECRET_KEY = AWS_SECRET_ACCESS_KEY

                            sh """
                            ssh -o StrictHostKeyChecking=no ubuntu@${SSH_IP} << EOF
echo "✅ Connected to EC2"

# Update system and install packages
sudo apt-get update -y
sudo apt-get upgrade -y
sudo apt-get install -y --install-recommends \\
    docker.io curl git apt-transport-https software-properties-common \\
    conntrack daemonize python3 python3-pip unzip jq

# Add ubuntu to docker group
sudo usermod -aG docker ubuntu

# Fix kernel file protection
sudo sysctl fs.protected_regular=0

# Install kubectl
curl -LO https://dl.k8s.io/release/v1.33.1/bin/linux/amd64/kubectl
chmod +x kubectl && sudo mv kubectl /usr/local/bin/

# Install Minikube
curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.33.1/minikube-linux-amd64
chmod +x minikube 
sudo mv minikube /usr/local/bin/

# Install Helm
curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

# Clean previous Minikube setup
minikube delete --all --purge || true
rm -rf ~/.minikube ~/.kube

# Configure containerd
cat <<EOF2 | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF2
sudo modprobe overlay
sudo modprobe br_netfilter

cat <<EOF3 | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF3
sudo sysctl --system

# Install and enable containerd
sudo apt-get install -y containerd
sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
sudo systemctl enable --now containerd

# Install crictl v1.33.0
wget https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.33.0/crictl-v1.33.0-linux-amd64.tar.gz
tar -xvzf crictl-v1.33.0-linux-amd64.tar.gz
sudo mv crictl /usr/local/bin/
sudo chmod +x /usr/local/bin/crictl

# Install CNI plugins
wget https://github.com/containernetworking/plugins/releases/download/v1.5.0/cni-plugins-linux-amd64-v1.5.0.tgz
sudo mkdir -p /opt/cni/bin
sudo tar --overwrite -xvzf cni-plugins-linux-amd64-v1.5.0.tgz -C /opt/cni/bin/

# Start Minikube with containerd (no driver)
sudo CHANGE_MINIKUBE_NONE_USER=true minikube start --driver=none --container-runtime=containerd

# Install boto3
pip3 install --upgrade boto3 --break-system-packages

# AWS CLI
rm -rf aws awscliv2.zip
curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"
unzip -o awscliv2.zip
sudo ./aws/install

# Configure AWS CLI
aws configure set aws_access_key_id "${ACCESS_KEY}"
aws configure set aws_secret_access_key "${SECRET_KEY}"
aws configure set region "${REGION}"
aws configure set output "${OUTPUT}"

echo "✅ AWS credentials configured inside EC2"

rm -rf aws awscliv2.zip crictl-*.tar.gz cni-plugins-*.tgz cni-plugins-*.tgz.* crictl-*.tar.gz.*

sudo apt-get clean
sudo rm -rf ~/.cache

EOF
                        """
                        }
                    }
                }
            }
        }














    }
}
